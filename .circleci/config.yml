# https://circleci.com/docs/reference-2-1/
# https://circleci.com/docs/2.0/workflows/
#
version: 2.1
jobs:
  build-and-test-node10:
    docker:
      - image: &image node:10

    working_directory: &working_directory ~/tmp-node10

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - yarn-dependencies-{{ checksum "yarn.lock" }}

      - run:
          name: Install Packages
          # NOTES:
          #   allow ENV-driven `npm` token; CircleCI-only, reverted after install
          #   `yarn.lock` enforcement, just like the Dockerfile
          command: >
            cp ./.npmrc /tmp/.npmrc;
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ./.npmrc;

            rm -f npm-shrinkwrap.json;
            yarn install --frozen-lockfile;

            cp /tmp/.npmrc ./.npmrc;

      - save_cache:
          paths:
            - node_modules
          key: yarn-dependencies-{{ checksum "yarn.lock" }}

      - run:
          name: Fail if '.only's are detected in the Test Suite
          command: >
            (! test -n "$(git grep '\.only' | cat | grep -v 'circleci/config.yml')")

      - run:
          name: Build
          command: "yarn build"

      - run:
          name: Test Suite
          command: "yarn run test:ci"

      # we will do our publish from this Workspace
      - persist_to_workspace:
          root: .
          paths:
            - .

  #
  # @see README.md + "Node 6 Support"
  #
  build-and-test-node6:
    docker:
      - image: node:6

    working_directory: ~/tmp-node6

    steps:
      - checkout

      - restore_cache:
          keys:
          - npm-dependencies-{{ checksum "npm-shrinkwrap.json" }}
          - npm-dependencies-

      - run:
          name: Install Packages
          # NOTES:
          #   allow ENV-driven `npm` token; CircleCI-only, reverted after install
          #   https://docs.npmjs.com/cli/install
          #     "If the package has a ... shrinkwrap file, the installation of dependencies will be driven by that."
          command: >
            cp ./.npmrc /tmp/.npmrc;
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ./.npmrc;

            rm -f yarn.lock;
            npm install;

            cp /tmp/.npmrc ./.npmrc;

      - save_cache:
          paths:
            - node_modules
          key: yarn-dependencies-{{ checksum "npm-shrinkwrap.json" }}

      - run:
          name: Fail if '.only's are detected in the Test Suite
          command: >
            (! test -n "$(git grep '\.only' | cat | grep -v 'circleci/config.yml')")

      - run:
          name: Build
          command: "npm run node6:build"

      - run:
          name: Test Suite
          command: "npm run node6:test:ci"

  publish:
    docker:
      - image: *image

    working_directory: *working_directory

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Publish to npm
          # NOTES:
          #   allow ENV-driven `npm` token; CircleCI-only
          #   the Git tag embeds the version number (vs. scraping it from `package.json`)
          #   `yarn` doesn't need to run 'prepare', 'prepublish', etc.; they've already been covered
          command: >
            cp ./.npmrc /tmp/.npmrc;
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ./.npmrc;

            export SEMVER=$( echo "$CIRCLE_BRANCH" | sed s/^v// );
            echo "publishing version $SEMVER ..."

            yarn publish --ignore-scripts --new-version "$SEMVER";

            cp /tmp/.npmrc ./.npmrc;


workflows:
  version: 2.1
  build-and-test:
    jobs:
      - build-and-test-node10:
          filters:
            tags:
              only: /.*/
      - build-and-test-node6:
          filters:
            tags:
              only: /.*/
      - publish:
          requires:
            - build-and-test-node10
            - build-and-test-node6
          filters:
            tags:
              # from `yarn version`
              only: /^v[0-9]+[.].*/
            branches:
              # 100% tag-driven
              ignore: /.*/
